//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public with sharing class SnowflakeSchemaResponse {

	public class Parameters {
		public String name {get;set;} 
		public String value {get;set;} 

		public Parameters(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Parameters consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Rowtype {
		public String name {get;set;} 
		public String database {get;set;} 
		public String schema {get;set;} 
		public String table {get;set;} 
		public String type_Z {get;set;} // in json: type
		public Object scale {get;set;} 
		public Integer byteLength {get;set;} 
		public Boolean nullable {get;set;} 
		public Object precision {get;set;} 
		public Integer length {get;set;} 

		public Rowtype(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'database') {
							database = parser.getText();
						} else if (text == 'schema') {
							schema = parser.getText();
						} else if (text == 'table') {
							table = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'scale') {
							//scale = parser.readValueAs(Object.class);
						} else if (text == 'byteLength') {
							byteLength = parser.getIntegerValue();
						} else if (text == 'nullable') {
							nullable = parser.getBooleanValue();
						} else if (text == 'precision') {
							//precision = parser.readValueAs(Object.class);
						} else if (text == 'length') {
							length = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Rowtype consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public List<Parameters> parameters {get;set;} 
		public List<Rowtype> rowtype {get;set;} 
		public List<List<String>> rowset {get;set;} 
		public Integer total {get;set;} 
		public Integer returned {get;set;} 
		public String queryId {get;set;} 
		public Object databaseProvider {get;set;} 
		public Object finalDatabaseName {get;set;} 
		public Object finalSchemaName {get;set;} 
		public String finalWarehouseName {get;set;} 
		public String finalRoleName {get;set;} 
		public Integer numberOfBinds {get;set;} 
		public Boolean arrayBindSupported {get;set;} 
		public Integer statementTypeId {get;set;} 
		public Integer version {get;set;} 
		public Long sendResultTime {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'parameters') {
							parameters = arrayOfParameters(parser);
						} else if (text == 'rowtype') {
							rowtype = arrayOfRowtype(parser);
						} else if (text == 'rowset') {
							rowset = arrayOfListString(parser);
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'returned') {
							returned = parser.getIntegerValue();
						} else if (text == 'queryId') {
							queryId = parser.getText();
						} else if (text == 'databaseProvider') {
							databaseProvider = parser.readValueAs(Object.class);
						} else if (text == 'finalDatabaseName') {
							finalDatabaseName = parser.readValueAs(Object.class);
						} else if (text == 'finalSchemaName') {
							finalSchemaName = parser.readValueAs(Object.class);
						} else if (text == 'finalWarehouseName') {
							finalWarehouseName = parser.getText();
						} else if (text == 'finalRoleName') {
							finalRoleName = parser.getText();
						} else if (text == 'numberOfBinds') {
							numberOfBinds = parser.getIntegerValue();
						} else if (text == 'arrayBindSupported') {
							arrayBindSupported = parser.getBooleanValue();
						} else if (text == 'statementTypeId') {
							statementTypeId = parser.getIntegerValue();
						} else if (text == 'version') {
							version = parser.getIntegerValue();
						} else if (text == 'sendResultTime') {
							sendResultTime = parser.getLongValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Data data {get;set;} 
	public Object message {get;set;} 
	public Object code {get;set;} 
	public Boolean success {get;set;} 

	public SnowflakeSchemaResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = new Data(parser);
					} else if (text == 'message') {
						message = parser.readValueAs(Object.class);
					} else if (text == 'code') {
						code = parser.readValueAs(Object.class);
					} else if (text == 'success') {
						success = parser.getBooleanValue();
					} else {
						System.debug(LoggingLevel.WARN, 'SnowflakeSchemaResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static SnowflakeSchemaResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new SnowflakeSchemaResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Rowtype> arrayOfRowtype(System.JSONParser p) {
        List<Rowtype> res = new List<Rowtype>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Rowtype(p));
        }
        return res;
    }



    private static List<List<String>> arrayOfListString(System.JSONParser p) {
        List<List<String>> res = new List<List<String>>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(arrayOfString(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }









    private static List<Parameters> arrayOfParameters(System.JSONParser p) {
        List<Parameters> res = new List<Parameters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Parameters(p));
        }
        return res;
    }


}